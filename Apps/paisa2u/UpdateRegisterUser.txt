 public async Task<RegUserResource> UpdateRegUser(int id, RegUserResource user, CancellationToken cancellationToken)
        {
            var eduser = await _context.Users
                .FirstOrDefaultAsync(x => x.RegId == id, cancellationToken);
            if (eduser.RegId != id)
            {
                throw new Exception("User to update does not exist");
            }
            //All fields to be added here
            eduser.RegId = user.Regid;
            eduser.Firstname = user.Firstname;
            eduser.Middlename = user.Middlename;
            eduser.Email = user.Email;
            eduser.Lastname = user.Lastname;
            eduser.Username = user.Username;
            eduser.Referredby = user.Referredby;
            eduser.Regstatus = user.Regstatus;
            eduser.Phonenumber = user.Phonenumber;
            eduser.Endate = user.Endate;
            eduser.Enuser = user.Enuser;
            eduser.Substype = user.Substype;
            eduser.Autorenewal = user.Autorenewal;
            eduser.PasswordHash = user.PasswordHash;
            eduser.PasswordSalt = user.PasswordSalt;
            eduser.Regtype = user.Regtype;
            eduser.Vendortype = user.Vendortype;
            _context.Entry(eduser).State = EntityState.Modified;

            
            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                throw;
                
            }
            return new RegUserResource(
                user.Regid,
                user.Firstname,
                user.Middlename,
                user.Lastname,
                user.Email,
                user.Username,
                "",
                user.Referredby,
                user.Regtype,
                user.Vendortype,
                user.Phonenumber,
                user.Endate,
                user.Enuser,
                user.Substype,
                user.Regstatus,
                user.Autorenewal,
                user.Qrpicture,
                user.PasswordHash,
                user.PasswordSalt
                );
        }