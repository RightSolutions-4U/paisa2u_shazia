//Added by Shazia Aug 4, 2023 for registration
        public async Task<RegUserResource> Registration(RegUserRegisterResource resource, CancellationToken cancellationToken)
        {
            var user = new Users
            {
                Firstname = resource.Firstname,
                Middlename = resource.Middlename,
                Lastname = resource.Lastname,
                Email = resource.Email,
                Username = resource.Username,
                //Pwd = resource.Pwd, don't save password
                Pwd = "",
                Referredby = resource.Referredby,
                Regtype = resource.Regtype,
                Vendortype = resource.Vendortype,
                Phonenumber = resource.Phonenumber,
                Endate = resource.Endate,
                Enuser = resource.Enuser,
                Substype = resource.Substype,
                Regstatus = resource.Regstatus,
                Autorenewal = resource.Autorenewal,
                Qrpicture = resource.Qrpicture,
                PasswordSalt = PasswordHasher.GenerateSalt(),
                PasswordHash = resource.PasswordHash
            };
            user.PasswordHash = PasswordHasher.ComputeHash(resource.Pwd, user.PasswordSalt, _pepper, _iteration);
            await _context.Users.AddAsync(user, cancellationToken);
            await _context.SaveChangesAsync(cancellationToken);

             
            
            return new RegUserResource(
                user.RegId,
                user.Firstname,
                user.Middlename,
                user.Lastname,
                user.Email,
                user.Username,
                "",
                user.Referredby,
                user.Regtype,
                user.Vendortype,
                user.Phonenumber,
                user.Endate,
                user.Enuser,
                user.Substype,
                user.Regstatus,
                user.Autorenewal,
                user.Qrpicture,
                user.PasswordSalt,
                user.PasswordHash
                
                );
        }